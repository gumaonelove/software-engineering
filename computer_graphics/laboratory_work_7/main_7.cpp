#include <iostream>
#include <gl/glut.h>
#include <cmath>
#include <math.h>
void init();
void draw();

void main(int argc, char** argv)
{
	glutInit(&argc, argv); //инициализация библиотеки GLUT
	glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB); // устанавливается режим дисплея: режим двойной буферизации (в одном буфере кадра выполняется рисование, другой отображается) и переключение буферов; цвета представлять как смесь RGB
	glutInitWindowSize(980, 680); //устанавливается размер экранного окна window
	glutInitWindowPosition(50, 50); //устанавливается положение (позиция) экранного окна window
	glutCreateWindow("Laba 7");  //инициализируется открытие экранного окна window
	init();
	glutDisplayFunc(draw); //функция draw( ) регистрируется как функция обратного вызова для события открытия или обновления экранного окна
	glutMainLoop(); //переводит программу в бесконечный цикл ожидания события
}

//функция инициализации
void init()
{
	glClearColor(1.0, 1.0, 1.0, 1.0); //установка цвета фона
	glMatrixMode(GL_PROJECTION); //в качестве текущей устанавливается матрица проецирования
	glLoadIdentity(); //текущая матрица устанавливается в единицу
	gluOrtho2D(-75.0, 75.0, -75.0, 75.0); //устанавливается мировое окно
}

//функция рисования и обновления окна
void draw()
{
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //очистка буфферов до предустановленных значений
	glViewport(40, 40, 900, 600); //установка положения и размеров порта просмотра
	glColor3f(0.0, 0.0, 0.0); //установка цвета рисования
	//отрисовка осей
	glBegin(GL_LINES);
	glVertex2f(-75.0, 0.0); glVertex2f(75.0, 0.0);
	glVertex2f(0.0, 75.0); glVertex2f(0.0, -75.0);
	glEnd();

	GLfloat a = 1, b = 10, c = 3; //переменные, хранящие константы
	GLfloat X1 = -75.0, Y1 = -74.0; //начальные значения x и y для метода оценочной функции
	GLfloat X2 = -75.0, Y2 = 1.0, //начальные значения x и y для метода ЦДА
		dX = 0.0, dY = 0.0; //шаг по x и y для метода ЦДА
	glColor3f(1.0, 0.0, 0.0);
	//МЕТОД ОЦЕНОЧНОЙ ФУНКЦИИ
	glBegin(GL_LINE_STRIP); //рисует связанную группу линейных сегментов от первой вершины до последней
	while (Y1 > -75 && X1 < 75) //цикл по четвертой четверти
	{
		if (pow(Y1, 2) - a * X1 * Y1 - b * c < 0)
		{
			glVertex2d(X1, Y1);
			X1 += 0.01;
		}
		else if (pow(Y1, 2) - a * X1 * Y1 - b * c > 0)
		{
			glVertex2d(X1, Y1);
			Y1 += 0.01;
		}
		else {
			if (X1 <= Y1) {
				glVertex2d(X1, Y1);
				X1 += 0.01;
			}
			else {
				glVertex2d(X1, Y1);
				Y1 += 0.01;
			}
		}
	}
	glEnd();
	//МЕТОД ЦДА
	glColor3f(0.0, 1.0, 0.0); //установка цвета рисования
	glBegin(GL_LINE_STRIP); //рисует связанную группу линейных сегментов от первой вершины до последней
	while (X2 < 75) //цикл по первой четверти
	{
		X2 += dX;
		Y2 += dY;
		//расчет шага по x и y
		dX = (2 * Y2 - a * X2) / sqrt(pow(2 * Y2 - a * X2, 2) + pow(-a * Y2, 2));
		dY = -(-a * Y2) / sqrt(pow(2 * Y2 - a * X2, 2) + pow(-a * Y2, 2));
		glVertex2f(X2, Y2);
	}
	glEnd();
	glFlush(); //принудительное выполнение накопленных команд OpenGL

}